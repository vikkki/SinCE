colourCount = 9
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5, cols = getPalette(colourCount))
ggplot(df) +
geom_bar(aes(x = x, y = y), stat="identity",
fill = c("#0B90AA","#7dce94","#B1B336","#04384A","#66638B","#D74B4B","#FF652D","#F6AE2D","#AE8D65","#D8DEAE","#70AB8F"))
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5, cols = getPalette(colourCount))
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5, cols = getPalette(8))
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5, cols = getPalette(11))
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5, cols = getPalette(15))
ggplot(df) +
geom_bar(aes(x = x, y = y), stat="identity",
fill = c("#0B90AA","#7dce94","#B1B336","#04384A","#66638B","#D74B4B","#FF652D","#F6AE2D","#AE8D65","#D8DEAE","#70AB8F"))
rep(1,10)
df <- data.frame(x = c(1:11), y = rep(1,11))
ggplot(df) +
geom_bar(aes(x = x, y = y), stat="identity",
fill = c("#0B90AA","#7dce94","#B1B336","#04384A","#66638B","#D74B4B","#FF652D","#F6AE2D","#AE8D65","#D8DEAE","#70AB8F"))
ggplot(df) +
geom_bar(aes(x = x, y = y), stat="identity",
fill = my_color)
#### color set ####
my_color = c("#0B90AA","#7dce94","#B1B336","#04384A","#66638B","#D74B4B","#FF652D","#F6AE2D","#AE8D65","#D8DEAE","#70AB8F")
df <- data.frame(x = c(1:11), y = rep(1,11))
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
getPalette(15)
levels(sc_seurat_cluster())
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
as.numeric("1,2,3,4")
as.numeric(c("1","2","3","4"))
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
RidgePlot(pbmc, features = c("LYZ", "CCL5", "IL32", "PTPRCAP", "FCGR3A", "PF4"))
runApp('Documents/shiny/view_scRNA_app/view_scrna')
RidgePlot(sc_seurat_cluster(), features = plot_features(), ncol = 2, do.sort = FALSE)
RidgePlot(sc_seurat_cluster(), features = plot_features(), ncol = 2)
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
DimPlot(pbmc, reduction = "pca")
DimPlot(pbmc, reduction = "pca",dims = 1:2)
DimPlot(pbmc, reduction = "pca",dims = 3:2)
DimPlot(pbmc, reduction = "pca",dims = 4:2)
DimPlot(pbmc, reduction = "pca",dims = c(1,2))
DimPlot(pbmc, reduction = "pca",dims = c(6,2))
DimPlot(pbmc, reduction = "pca",dims = c(4,2))
DimPlot(pbmc, reduction = "pca",dims = c(1,4,2))
DimPlot(pbmc, reduction = "pca",dims = c(2,2))
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
range(1,10)
range(1,101,)
range(1,11,1)
range(1,1,10)
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
FeatureScatter(pbmc, feature1 = "LYZ", feature2 = "CCL5")
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
input$featurey
FeatureScatter(sc_seurat_cluster(), feature1 = input$featurex, feature2 = input$featurey)
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/uitest')
runApp('Documents/shiny/uitest')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
max(pbmc[["percent.mt"]])
max(pbmc[["nFeature_RNA"]])
max(pbmc[["nCount_RNA"]])
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
input$clean_feature[2]
subset(sc_seurat_qc_sample(), subset =
nFeature_RNA >= input$clean_feature[1] & nFeature_RNA <= input$clean_feature[2]
& nCount_RNA >= input$clean_count[1] & nCount_RNA <= input$clean_count[2]
& percent.mt >= input$clean_mito[1] & percent.mt <= input$clean_mito[2])
input$clean_mito[1]
input$clean_count[1
]
input$clean_feature[1]
subset(sc_seurat_qc_sample(), subset =
nFeature_RNA >= input$clean_feature[1])
subset(sc_seurat_qc_sample(), subset =
nFeature_RNA >= 11)
runApp('Documents/shiny/view_scRNA_app/view_scrna')
subset(sc_seurat_qc_sample(), subset =
nFeature_RNA >= fmin & nFeature_RNA <= fmax
#& nCount_RNA >= input$clean_count[1] & nCount_RNA <= input$clean_count[2]
#& percent.mt >= input$clean_mito[1] & percent.mt <= input$clean_mito[2]
)
fmin
exp = paste0("nFeature_RNA >= ",fmin)
exp
subset(sc_seurat_qc_sample(), subset = exp)
new_pbmc = pbmc[, which(x = percent.mt <= 15)]
new_pbmc = pbmc[, which(x = nFeature_RNA <= 3500)]
View(pbmc)
expr <- FetchData(object = pbmc, vars = nFeature_RNA)
cells.use <- colnames(pbmc)[which(pbmc[[]]['nFeature_RNA'] >=200)]
cells.use <- colnames(pbmc)[which(pbmc[[]]['nFeature_RNA'] <=1000)]
cells.use <- colnames(pbmc)[which(pbmc[[]]['nFeature_RNA'] <=1500)]
pbmc_subset <- subset(pbmc], cells = cells.use)
pbmc_subset <- subset(pbmc, cells = cells.use)
cells.use <- colnames(pbmc)[which(pbmc[[]]['nFeature_RNA'] <=1500) & pbmc[[]]['nFeature_RNA'] <=500)]
cells.use <- colnames(pbmc)[which(pbmc[[]]['nFeature_RNA'] <=1500 & pbmc[[]]['nFeature_RNA'] <=500)]
pbmc_subset <- subset(pbmc, cells = cells.use)
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
mmax
colnames(pbmc)[which(pbmc[[]]['nFeature_RNA'] >= fmin & pbmc[[]]['nFeature_RNA'] <= fmax)]
colnames(pbmc)[which(pbmc[[]]['nFeature_RNA'] >= fmin & pbmc[[]]['nFeature_RNA'] <= fmax &
pbmc[[]]['nCount_RNA'] >= cmin & pbmc[[]]['nCount_RNA'] <= cmax &
pbmc[[]]['percent.mt'] >= mmin & pbmc[[]]['percent.mt'] <= mmax))]
cells_use <- colnames(pbmc)[which(pbmc[[]]['nFeature_RNA'] >= fmin & pbmc[[]]['nFeature_RNA'] <= fmax &
pbmc[[]]['nCount_RNA'] >= cmin & pbmc[[]]['nCount_RNA'] <= cmax &
pbmc[[]]['percent.mt'] >= mmin & pbmc[[]]['percent.mt'] <= mmax)]
cells_use <- colnames(pbmc)[which(
pbmc[[]]['percent.mt'] >= mmin & pbmc[[]]['percent.mt'] <= mmax)]
subset(sc, cells = cells_use)
pbmc_subset <- subset(pbmc, cells = cells_use)
runApp()
runApp('Documents/shiny/view_scRNA_app/view_scrna')
plot <- FeaturePlot(pbmc, features = "MS4A1")
HoverLocator(plot = plot, information = FetchData(pbmc, vars = c("ident", "PC_1", "nFeature_RNA")))
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
library(plotly)
#install.packages("gapminder")
library(gapminder)
p <- ggplot(gapminder, aes(x = year, y = lifeExp, text = paste("country:",country))) +
geom_point() +
facet_wrap(~ continent)
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
plot <- FeaturePlot(pbmc, features = "MS4A1")
HoverLocator(plot = plot, information = FetchData(pbmc, vars = c("ident", "PC_1", "nFeature_RNA")))
runApp('Documents/shiny/view_scRNA_app/view_scrna')
plot <- FeaturePlot(pbmc, features = c("PC_1","PC_2"))
HoverLocator(plot = plot, information = FetchData(pbmc, vars = c("ident", "PC_1", "nFeature_RNA")))
FeaturePlot(pbmc, features = c("PC_1","PC_2"))
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
library(shiny)
library(shinythemes)
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
shiny::runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
library(shinythemes)
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
1 != 2
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "/data/10x_sample/GSE122713/")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "/data/10x_sample/GSE122713/")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "four", min.cells = 3, min.features = 200)
pbmc
View(pbmc)
library(tidyverse)
install.packages("tidyverse")
install.packages("networkD3")
library(tidyverse)
detach("package:tidyr", unload=TRUE)
detach("package:dplyr", unload=TRUE)
library(tidyverse)
library("navdata")
install.packages("navdata")
data("phone.call2")
install.packages("navdata")
devtools::install_github("kassambara/navdata")
library(tidyverse)
library("navdata")
data("phone.call2")
nodes <- phone.call2$nodes
edges <- phone.call2$edges
View(edges)
View(nodes)
nodes_d3 <- mutate(nodes, id = id - 1)
View(nodes_d3)
edges_d3 <- mutate(edges, from = from - 1, to = to - 1)
View(edges_d3)
library(networkD3)
forceNetwork(
Links = edges_d3, Nodes = nodes_d3,
Source = "from", Target = "to",      # so the network is directed.
NodeID = "label", Group = "id", Value = "weight",
opacity = 1, fontSize = 16, zoom = TRUE
)
node <- read_csv2("/data/20190721_for_xf.csv",sep = ",")
node <- read_csv2("/data/20190721_for_xf.csv")
info = read.table("/data/20190721_for_xf.csv", sep = ",", quote = '"', header = F)
View(info)
strsplit("aaaa:ddd:asas",sep = ";")
strsplit("aaaa:ddd:asas", ";")
strsplit("aaaa:ddd:asas", ":")
strsplit(c("aaaa:ddd:asas","asa:as:asa"), ":")
strsplit(c("aaaa:ddd:asas","asa:as:asa"), ":")[[]][1]
strsplit(c("aaaa:ddd:asas","asa:as:asa"), ":")[[:]][1]
strsplit(c("aaaa:ddd:asas","asa:as:asa"), ":")[1]
strsplit(c("aaaa:ddd:asas","asa:as:asa"), ":")[[]][1][1]
strsplit(c("aaaa:ddd:asas","asa:as:asa"), ":")[[1]][1][1]
strsplit(c("aaaa:ddd:asas","asa:as:asa"), ":")[1][1]
strsplit(c("aaaa:ddd:asas","asa:as:asa"), ":")[][1][1]
strsplit(c("aaaa:ddd:asas","asa:as:asa"), ":")[:][1][1]
colnames(info) <- c("from","to","weight")
sp <- function(s){strsplit(s, ";")[[1]]}
sp(info$from[1])
info$from <- as.character(info$from)
View(info)
info$to <- as.character(info$to)
sp(info$from[1])
sp(info$from[1])[1]
info2 = info
info2$to[i] = sp(info$from[i])[2]
sp(info$from)
length(info)
length(info$from)
sp <- function(s){strsplit(s, ";")[[1:49]]}
sp <- function(s){strsplit(s, ";")[[1:49]][]}
sp(info$from)
sp <- function(s){strsplit(s, ";")[[1:49]][1]}
sp(info$from)
strsplit(info$from)
strsplit(info$from,";")
as.dataframe(strsplit(info$from,";"))
as.data.frame(strsplit(info$from,";"))
info2 = as.data.frame(strsplit(info$from,";"))
View(info2)
info2 = as.data.frame(strsplit(info$from,";"), col.names = F)
info2 = t(as.data.frame(strsplit(info$from,";"), col.names = F))
colnames(info2) = 1:49
colnames(info2) = c(1:49)
info2 < strsplit(info$from,";")
info2 < strsplit(info$from[1],";")
info$from <- as.character(info$from)
info$to <- as.character(info$to)
info2 < strsplit(info$from[1],";")
info2 < strsplit("
chr3:48000000-49000000;chr3:194000000-195000000;",";")
info2 <- strsplit("
chr3:48000000-49000000;chr3:194000000-195000000;",";")
View(info2)
info2 <- strsplit(info$from,";")
View(info)
View(info2)
View(info2)
info3 <- data.frame(matrix(unlist(info2), nrow=2, byrow=T))
View(info3)
info3 <- data.frame(matrix(unlist(info2), nrow=49, byrow=T))
View(info3)
unlist(info2)
info4 <- data.frame(matrix(unlist(info2), nclo=2, bycol=T))
info4 <- data.frame(matrix(unlist(info2), ncol =2, bycol=T))
info4 <- data.frame(matrix(unlist(info2), ncol =2, byrow = T))
View(info4)
info3 <- data.frame(matrix(unlist(info2), nrow=49, byrow=T,stringsAsFactors=FALSE))
info3 <- data.frame(matrix(unlist(info2), nrow=49, byrow=T),stringsAsFactors=FALSE)
View(info3)
info3$weight <- info$weight
info3$weight <- as.numeric(info$weight)
str(info)
str(info3)
forceNetwork(
Links = edges_d3,
Source = "X1", Target = "X2",      # so the network is directed.
Value = "weight",
opacity = 1, fontSize = 16, zoom = TRUE
)
forceNetwork(
Links = info3,
Source = "X1", Target = "X2",      # so the network is directed.
Value = "weight",
opacity = 1, fontSize = 16, zoom = TRUE
)
simpleNetwork(info3)
length(unique(rbind(info3$X1,info3$X2)))
length(unique(c(info3$X1,info3$X2)))
library(circlize)
install.packages("circlize")
library(circlize)
chordDiagram(info3, transparency = 0.9)
info2 <- info3[,1:2]
chordDiagram(info2, transparency = 0.9)
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
detach("package:Seurat", unload=TRUE)
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
library(igraph)
plot(info2, layout=layout.circle, main="circle")
network=graph_from_data_frame(d=info2, directed=F)
# Count the number of degree for each node:
deg=degree(network, mode="all")
# Plot
plot(network, vertex.size=deg*6, vertex.color=rgb(0.1,0.7,0.8,0.5) )
# Plot
plot(network, vertex.size=deg*2, vertex.color=rgb(0.1,0.7,0.8,0.5) )
plot(network, layout=layout.circle, main="circle")
plot(network, layout=layout.fruchterman.reingold, main="fruchterman.reingold")
install.packages("dnet")
library(dnet)
install.packages("supraHex")
BiocManager::install("supraHex")
install.packages("dnet")
BiocManager::install("Rgraphviz")
install.packages("dnet")
library(dnet)
visNetArc(network)
visNetArc(network,orientation = "horizontal")
# Plot
plot(network, vertex.size=deg*2, vertex.color=rgb(0.1,0.7,0.8,0.5) )\
# Plot
plot(network, vertex.size=deg*2, vertex.color=rgb(0.1,0.7,0.8,0.5) )
View(network)
colors <- colorRampPalette(c("blue", "red"))(5)
colors <- colorRampPalette(c("blue", "red"))(10)
plot(10:1, bg = colors[rank(10:1)], cex = 2, pch = 22)
rank(10:1)
colors
colors <- colorRampPalette(c("blue", "red"))(21)
node_color <- colors[deg]
colors
# Plot
plot(network, vertex.color=node_color )
max(deg)
colors <- colorRampPalette(c("blue", "red"))(17)
node_color <- colors[deg]
plot(network, vertex.color=node_color )
colors <- colorRampPalette(c("#0a3d62", "#eb2f06"))(17)
node_color <- colors[deg]
plot(network, vertex.color=node_color )
chordDiagram(info2, transparency = 0.9)
plot(network, vertex.color=node_color, label.color = "black")
################################################################################################################
info = read.table("/data/20190721_for_xf_1001.csv", sep = ",", quote = '"', header = F)
colnames(info) <- c("from","to","weight")
################################################################################################################
info = read.table("/data/20190721_for_xf_1001.csv", sep = ",", quote = '"', header = F)
View(info)
colnames(info) <- c("from","weight")
info$from <- as.character(info$from)
info2 = strsplit(info$from,";")
View(info2)
info3 <- data.frame(matrix(unlist(info2), nrow=33, byrow=T),stringsAsFactors=FALSE)
info3$weight <- as.numeric(info$weight)
info_pair <- info3[,1:2]
View(info_pair)
View(info)
length(unique(info_pair$X1,info_pair$X2)
)
n_node = length(unique(info_pair$X1,info_pair$X2))
simpleNetwork(info3)
network=graph_from_data_frame(d=info2, directed=F)
deg=degree(network, mode="all")
max(deg)
colors <- colorRampPalette(c("#0a3d62", "#eb2f06"))(17)
node_color <- colors[deg]
plot(network, vertex.color=node_color, label.color = "black")
network=graph_from_data_frame(d=info_pair, directed=F)
deg=degree(network, mode="all")
max(deg)
colors <- colorRampPalette(c("#0a3d62", "#eb2f06"))(17)
node_color <- colors[deg]
plot(network, vertex.color=node_color, label.color = "black")
################################################################################################################
info = read.table("/data/20190721_for_xf_11.csv", sep = ",", quote = '"', header = F)
colnames(info) <- c("from","weight")
info$from <- as.character(info$from)
info$to <- as.character(info$to)
info$from <- as.character(info$from)
info2 = strsplit(info$from,";")
info3 <- data.frame(matrix(unlist(info2), nrow=33, byrow=T),stringsAsFactors=FALSE)
info3 <- data.frame(matrix(unlist(info2), nrow=27, byrow=T),stringsAsFactors=FALSE)
info3$weight <- as.numeric(info$weight)
info_pair <- info3[,1:2]
View(info_pair)
View(info)
n_node = length(unique(info_pair$X1,info_pair$X2))
network=graph_from_data_frame(d=info_pair, directed=F)
deg=degree(network, mode="all")
max(deg)
colors <- colorRampPalette(c("#0a3d62", "#eb2f06"))(17)
node_color <- colors[deg]
plot(network, vertex.color=node_color, label.color = "black")
shiny::runApp('Documents/shiny/view_scRNA_app/view_scrna')
detach("package:dnet", unload=TRUE)
detach("package:igraph", unload=TRUE)
detach("package:Seurat", unload=TRUE)
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
