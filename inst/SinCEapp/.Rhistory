install.packages(c("dplyr", "DT", "ggplot2", "heatmaply", "plotly", "RColorBrewer", "Seurat"))
shiny::runApp('Documents/shiny/view_scRNA_app/view_scrna')
iinstall.packages("plotly")
install.packages("plotly")
install.packages("plotly")\
install.packages("plotly")
install.packages("curl")
install.packages("curl")
install.packages("plotly")
runApp('Documents/shiny/view_scRNA_app/view_scrna')
install.packages("seurat")
install.packages("Seurat")
runApp('Documents/shiny/view_scRNA_app/view_scrna')
shiny::runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
shiny::runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
runApp('Documents/shiny/view_scRNA_app/view_scrna')
install.packages(c("dnet", "gapminder", "networkD3", "tidyverse"))
library(dplyr)
library(Seurat)
dir = "/home/xiaofan/Documents/shiny/pbmc1_nova_filtered_feature_bc_matrix/"
mat = load_10x_3_files(paste0(dir,"barcodes.tsv.gz"), paste0(dir,"features.tsv.gz"), paste0(dir,"matrix.mtx.gz"))
mat = load_10x_3_files(paste0(dir,"barcodes.tsv.gz"), paste0(dir,"features.tsv"), paste0(dir,"matrix.mtx.gz"))
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = dir)
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc", min.cells = 3, min.features = 2)
pbmc
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2500)
########
hvf.info =HVFInfo(object = pbmc[["RNA"]], selection.method = 'vst',status = TRUE)
var.status <- c('no', 'yes')[unlist(x = hvf.info[, ncol(x = hvf.info)]) + 1]
#####
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
pbmc <- FindNeighbors(pbmc, dims = 1:15)
pbmc <- FindClusters(pbmc, resolution = 0.35)
levels(pbmc)
pbmc <- FindClusters(pbmc, resolution = 0.202)
levels(pbmc)
pbmc <- RunTSNE(pbmc, dims = 1:10)
pbmc <- RunUMAP(pbmc, dims = 1:10)
pbmc <- RunUMAP(pbmc, dims = 1:10)
install.packages(c("dnet", "tidyverse"))
pbmc <- RunUMAP(pbmc, dims = 1:10)
library(Seurat)
samples = c("6519_P3_102319","6519_P4_102319","6519_P5_102319",
"P3_1118","P4_1118","P5_1118",
"P3_102119","P4_102119","P5_102119",
"P5_1113","P5_081519")
sample.list <- list() #create a list of seurat objects, with names of samples as indexes
for(sam in samples){
sc.data <- Read10X_h5(paste0("/home/xiaofan/Documents/10xRNA_working/RaymondWu/RaymondWu_20200114/", sam, "_mm/outs/filtered_feature_bc_matrix.h5"))
sample.list[[sam]] <- CreateSeuratObject(counts = sc.data, project = "nextseq", min.cells = 3, min.features = 200)
}
View(sample.list)
library(SeuratData)
install.packages("SeuratData")
install.packages("Seurat")
devtools::install_github('satijalab/seurat-data')
library(SeuratData)
library(cowplot)
InstallData("panc8")
data("panc8")
force(panc8)
pancreas.list <- SplitObject(panc8, split.by = "tech")
View(pancreas.list)
View(panc8)
rep("1",2)
library(Seurat)
samples = c("6519_P3_102319","6519_P4_102319","6519_P5_102319",
"P3_1118","P4_1118","P5_1118",
"P3_102119","P4_102119","P5_102119",
"P5_1113","P5_081519")
sample.list <- list() #create a list of seurat objects, with names of samples as indexes
for(sam in samples){
sc.data <- Read10X_h5(paste0("/home/xiaofan/Documents/10xRNA_working/RaymondWu/RaymondWu_20200114/", sam, "_mm/outs/filtered_feature_bc_matrix.h5"))
sc.data <- CreateSeuratObject(counts = sc.data, project = "nextseq", min.cells = 3, min.features = 200)
sc.data$sample_name <- sam
sample.list[[sam]] <- CreateSeuratObject(counts = sc.data, project = "nextseq", min.cells = 3, min.features = 200)
}
samples = c("6519_P3_102319","6519_P4_102319","6519_P5_102319",
"P3_1118","P4_1118","P5_1118",
"P3_102119","P4_102119","P5_102119",
"P5_1113","P5_081519")
sample.list <- list() #create a list of seurat objects, with names of samples as indexes
for(sam in samples){
sc.data <- Read10X_h5(paste0("/home/xiaofan/Documents/10xRNA_working/RaymondWu/RaymondWu_20200114/", sam, "_mm/outs/filtered_feature_bc_matrix.h5"))
sc.data <- CreateSeuratObject(counts = sc.data, project = "nextseq", min.cells = 3, min.features = 200)
sc.data$sample_name <- rep(sam, ncol(sc.data))
sample.list[[sam]] <- CreateSeuratObject(counts = sc.data, project = "nextseq", min.cells = 3, min.features = 200)
}
samples = c("6519_P3_102319","6519_P4_102319","6519_P5_102319",
"P3_1118","P4_1118","P5_1118",
"P3_102119","P4_102119","P5_102119",
"P5_1113","P5_081519")
sample.list <- list() #create a list of seurat objects, with names of samples as indexes
for(sam in samples){
sc.data <- Read10X_h5(paste0("/home/xiaofan/Documents/10xRNA_working/RaymondWu/RaymondWu_20200114/", sam, "_mm/outs/filtered_feature_bc_matrix.h5"))
sc.data <- CreateSeuratObject(counts = sc.data, project = "nextseq", min.cells = 3, min.features = 200)
sc.data$sample_name <- rep(sam, ncol(sc.data))
sample.list[[sam]] <- CreateSeuratObject(counts = sc.data, project = "nextseq", min.cells = 3, min.features = 200)
}
samples = c("6519_P3_102319","6519_P4_102319","6519_P5_102319",
"P3_1118","P4_1118","P5_1118",
"P3_102119","P4_102119","P5_102119",
"P5_1113","P5_081519")
sample.list <- list() #create a list of seurat objects, with names of samples as indexes
sc.data <- Read10X_h5(paste0("/home/xiaofan/Documents/10xRNA_working/RaymondWu/RaymondWu_20200114/", sam, "_mm/outs/filtered_feature_bc_matrix.h5"))
for(sam in samples){
sc.data <- Read10X_h5(paste0("/home/xiaofan/Documents/10xRNA_working/RaymondWu/RaymondWu_20200114/", sam, "_mm/outs/filtered_feature_bc_matrix.h5"))
sc.data <- CreateSeuratObject(counts = sc.data, project = "nextseq", min.cells = 3, min.features = 200)
sc.data$sample_name <- rep(sam, ncol(sc.data))
sample.list[[sam]] <- CreateSeuratObject(counts = sc.data, project = "nextseq", min.cells = 3, min.features = 200)
}
sc.data <- Read10X_h5(paste0("/home/xiaofan/Documents/10xRNA_working/RaymondWu/RaymondWu_20200114/", sam, "_mm/outs/filtered_feature_bc_matrix.h5"))
sc.data <- CreateSeuratObject(counts = sc.data, project = "nextseq", min.cells = 3, min.features = 200)
sc.data$sample_name <- rep(sam, ncol(sc.data))
View(sc.data)
library(Seurat)
samples = c("6519_P3_102319","6519_P4_102319","6519_P5_102319",
"P3_1118","P4_1118","P5_1118",
"P3_102119","P4_102119","P5_102119",
"P5_1113","P5_081519")
sample.list <- list() #create a list of seurat objects, with names of samples as indexes
for(sam in samples){
sc.data <- Read10X_h5(paste0("/home/xiaofan/Documents/10xRNA_working/RaymondWu/RaymondWu_20200114/", sam, "_mm/outs/filtered_feature_bc_matrix.h5"))
sc.data <- CreateSeuratObject(counts = sc.data, project = "nextseq", min.cells = 3, min.features = 200)
sc.data$sample_name <- rep(sam, ncol(sc.data))
sample.list[[sam]] <- sc.data
}
View(sample.list)
View(sample.list)
View(sample.list)
for (i in 1:length(sample.list)) {
sample.list[[i]] <- NormalizeData(sample.list[[i]], verbose = FALSE)
sample.list[[i]] <- FindVariableFeatures(sample.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = FALSE)
}
### integration of samples
library(future)
# check the current active plan
plan()
plan("multiprocess", workers = 10)
plan()
options(future.globals.maxSize = 3000 * 1024^2) # set this option to 3GB
sc.anchors <- FindIntegrationAnchors(object.list = sample.list[1:3], dims = 1:20)
sc.combined <- IntegrateData(anchorset = sc.anchors, dims = 1:20)
### perform an integrated analysis
DefaultAssay(sc.combined) <- "integrated"
# Run the standard workflow for visualization and clustering
sc.combined <- ScaleData(sc.combined, verbose = FALSE)
sc.combined <- RunPCA(sc.combined, npcs = 30, verbose = FALSE)
# t-SNE and Clustering
sc.combined <- RunUMAP(sc.combined, reduction = "pca", dims = 1:20)
sc.combined <- FindNeighbors(sc.combined, reduction = "pca", dims = 1:20)
sc.combined <- FindClusters(sc.combined, resolution = 0.5)
# Visualization
p1 <- DimPlot(sc.combined, reduction = "umap", group.by = "sample_name")
p2 <- DimPlot(sc.combined, reduction = "umap", label = TRUE)
plot_grid(p1, p2)
# Visualization
p1 <- DimPlot(sc.combined, reduction = "tsne", group.by = "sample_name")
sc.combined <- RunTSNE(sc.combined, reduction = "pca", dims = 1:20)
# Visualization
p1 <- DimPlot(sc.combined, reduction = "tsne", group.by = "sample_name")
p2 <- DimPlot(sc.combined, reduction = "tsne", label = TRUE)
plot_grid(p1, p2)
sc.anchors <- FindIntegrationAnchors(object.list = sample.list[4:6], dims = 1:20)
sc.combined <- IntegrateData(anchorset = sc.anchors, dims = 1:20)
### perform an integrated analysis
DefaultAssay(sc.combined) <- "integrated"
# Run the standard workflow for visualization and clustering
sc.combined <- ScaleData(sc.combined, verbose = FALSE)
sc.combined <- RunPCA(sc.combined, npcs = 30, verbose = FALSE)
# t-SNE and Clustering
sc.combined <- RunUMAP(sc.combined, reduction = "pca", dims = 1:20)
sc.combined <- RunTSNE(sc.combined, reduction = "pca", dims = 1:20)
sc.combined <- FindNeighbors(sc.combined, reduction = "pca", dims = 1:20)
sc.combined <- FindClusters(sc.combined, resolution = 0.5)
# Visualization
p1 <- DimPlot(sc.combined, reduction = "tsne", group.by = "sample_name")
p2 <- DimPlot(sc.combined, reduction = "tsne", label = TRUE)
plot_grid(p1, p2)
# Visualization
p1 <- DimPlot(sc.combined, reduction = "tsne", group.by = "sample_name")
p2 <- DimPlot(sc.combined, reduction = "tsne", label = TRUE)
plot_grid(p1, p2)
View(sample.list)
View(sc.anchors)
sample.list[4:6]
sc.anchors <- FindIntegrationAnchors(object.list = sample.list[4:6], dims = 1:20)
sc.combined <- IntegrateData(anchorset = sc.anchors, dims = 1:20)
View(sc.anchors)
View(sc.anchors)
object.list = sample.list[4:6]
View(object.list)
samples = c("6519_P3_102319","6519_P4_102319","6519_P5_102319",
"P3_1118","P4_1118","P5_1118",
"P3_102119","P4_102119","P5_102119",
"P5_1113","P5_081519")
sample.list <- list() #create a list of seurat objects, with names of samples as indexes
for(sam in samples){
sc.data <- Read10X_h5(paste0("/home/xiaofan/Documents/10xRNA_working/RaymondWu/RaymondWu_20200114/", sam, "_mm/outs/filtered_feature_bc_matrix.h5"))
sc.data <- CreateSeuratObject(counts = sc.data, project = "nextseq", min.cells = 3, min.features = 200)
sc.data$sample_name <- rep(sam, ncol(sc.data))
sample.list[[sam]] <- sc.data
}
for (i in 1:length(sample.list)) {
sample.list[[i]] <- NormalizeData(sample.list[[i]], verbose = FALSE)
sample.list[[i]] <- FindVariableFeatures(sample.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = FALSE)
}
View(sample.list)
save.image("~/Documents/10xRNA_pipeline/samplelist_nomalized.RData")
### integration of samples
library(future)
save.image("~/Documents/10xRNA_pipeline/samplelist_nomalized.RData")
### integration of samples
library(future)
# check the current active plan
plan()
plan("multiprocess", workers = 10)
plan()
options(future.globals.maxSize = 3000 * 1024^2) # set this option to 3GB
sc.anchors <- FindIntegrationAnchors(object.list = sample.list[4:6], dims = 1:20)
View(sample.list)
sc.anchors <- FindIntegrationAnchors(object.list = sample.list[7:9], dims = 1:20)
sc.combined <- IntegrateData(anchorset = sc.anchors, dims = 1:20)
### perform an integrated analysis
DefaultAssay(sc.combined) <- "integrated"
# Run the standard workflow for visualization and clustering
sc.combined <- ScaleData(sc.combined, verbose = FALSE)
sc.combined <- RunPCA(sc.combined, npcs = 30, verbose = FALSE)
# t-SNE and Clustering
sc.combined <- RunUMAP(sc.combined, reduction = "pca", dims = 1:20)
sc.combined <- RunTSNE(sc.combined, reduction = "pca", dims = 1:20)
sc.combined <- FindNeighbors(sc.combined, reduction = "pca", dims = 1:20)
sc.combined <- FindClusters(sc.combined, resolution = 0.5)
# Visualization
p1 <- DimPlot(sc.combined, reduction = "tsne", group.by = "sample_name")
p2 <- DimPlot(sc.combined, reduction = "tsne", label = TRUE)
plot_grid(p1, p2)
plan("multiprocess", workers = 10)
sample.list[c(1,4,7)]
sc.anchors <- FindIntegrationAnchors(object.list = sample.list[c(1,4,7)], dims = 1:20)
sc.combined <- IntegrateData(anchorset = sc.anchors, dims = 1:20)
### perform an integrated analysis
DefaultAssay(sc.combined) <- "integrated"
# Run the standard workflow for visualization and clustering
sc.combined <- ScaleData(sc.combined, verbose = FALSE)
sc.combined <- RunPCA(sc.combined, npcs = 30, verbose = FALSE)
# t-SNE and Clustering
sc.combined <- RunUMAP(sc.combined, reduction = "pca", dims = 1:20)
sc.combined <- RunTSNE(sc.combined, reduction = "pca", dims = 1:20)
sc.combined <- FindNeighbors(sc.combined, reduction = "pca", dims = 1:20)
sc.combined <- FindClusters(sc.combined, resolution = 0.5)
# Visualization
p1 <- DimPlot(sc.combined, reduction = "tsne", group.by = "sample_name")
p2 <- DimPlot(sc.combined, reduction = "tsne", label = TRUE)
plot_grid(p1, p2)
save.image("~/Documents/10xRNA_analysis/samplelist_nomalized.RData")
# Install bioconductor
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
install.packages("gert")
install.packages("Signac")
if (!requireNamespace("devtools", quietly = TRUE))
install.packages("devtools")
devtools::install_github("timoast/signac", ref = "develop")
install.packages("ggbio")
BiocManager::install("ggbio")
BiocManager::install("Hmisc")
BiocManager::install("Hmisc")
BiocManager::install("Hmisc")
BiocManager::install("ggbio")
BiocManager::install("latticeExtra")
.libPaths():
)
.libPaths()
BiocManager::install("latticeExtra")
.libPaths()
install.packages("Seurat")
remove.packages("Seurat", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
remove.packages("Seurat", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
install.packages("Seurat")
BiocManager::install("Seurat")
BiocManager::install("Seurat")
library(Seurat)
BiocManager::install("Seurat")
install.packages("cluster")
install.packages(c("KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "survival"))
BiocManager::install("Seurat")
install.packages('Seurat')
install.packages('Seurat')
install.packages('Signac')
install.packages(c(‘GenomeInfoDb’, ‘GenomicRanges’, ‘IRanges’, ‘Rsamtools’, ‘S4Vectors’, ‘BiocGenerics’, ‘Biostrings’, ‘ggbio’, ‘biovizBase’, ‘AnnotationFilter’))
install.packages("GenomeInfoDb")
BiocManager::install("GenomeInfoDb")
install.packages("BiocManager")
BiocManager::install("GenomeInfoDb")
barplot(dnorm(-1:0.1:1))
barplot(seq(-1,1,by = 0.1)
)
barplot(dnorm(seq(-1,1,by = 0.1)))
barplot(dnorm(seq(-3,3,by = 0.1)))
barplot(dnorm(seq(-3,3,by = 0.2)))
barplot(dnorm(seq(-3,3,by = 0.3)))
library(shiny)
shinyApp()
setwd("/home/xiaofan/Documents/shiny/view_scRNA_app/view_scrna")
shinyApp("ui.R", "server.R")
devtools::install_github("vikkki/SinCE")
install.packages("devtool")
install.packages("devtools")
devtools::install_github("vikkki/SinCE")
library(SinCE)
SinCE()
Y
setwd("/home/xiaofan/Documents/shiny/SinCE/inst/SinCEapp")
shiny::runApp(file.path(system.file("SinCEapp", package = "SinCE")))
setwd(C"ident_update")
setwd("/home/xiaofan/Documents/shiny/view_scRNA_app/view_scrna")
shiny::runApp()
shiny::runApp()
remove.packages("SinCE", lib="~/R/x86_64-pc-linux-gnu-library/4.1")
library(Seurat)
ident_update()
setwd("/home/xiaofan/Documents/shiny/SinCE/inst/SinCEapp")
shiny::runApp()
shiny::runApp()
